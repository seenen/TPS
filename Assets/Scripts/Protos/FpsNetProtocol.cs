// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FpsNetProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Net.ProtolJava {

  /// <summary>Holder for reflection information generated from FpsNetProtocol.proto</summary>
  public static partial class FpsNetProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for FpsNetProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FpsNetProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRGcHNOZXRQcm90b2NvbC5wcm90bxIPbmV0LnByb3RvbF9qYXZhIqUBChBG",
            "cHNVZHBQYWNrZXRIZWFkEg4KBnJvb21JZBgBIAEoCRIQCghwbGF5ZXJJZBgC",
            "IAEoCRIUCgxlbnN1cmVQYWNrZXQYAyABKAgSFwoPbWFzdGVyUGFja2V0TnVt",
            "GAQgASgFEhYKDnNsYXZlUGFja2V0TnVtGAUgASgFEhsKE3RvdGFsU2xhdmVQ",
            "YWNrZXROdW0YBiABKAUSCwoDcnR0GAcgASgFIjQKDVRjcFBhY2tldEhlYWQS",
            "EgoKcGFja2V0U2l6ZRgBIAEoBRIPCgdycGNOYW1lGAIgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.ProtolJava.FpsUdpPacketHead), global::Net.ProtolJava.FpsUdpPacketHead.Parser, new[]{ "RoomId", "PlayerId", "EnsurePacket", "MasterPacketNum", "SlavePacketNum", "TotalSlavePacketNum", "Rtt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Net.ProtolJava.TcpPacketHead), global::Net.ProtolJava.TcpPacketHead.Parser, new[]{ "PacketSize", "RpcName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// UDP通信的包头 
  /// </summary>
  public sealed partial class FpsUdpPacketHead : pb::IMessage<FpsUdpPacketHead> {
    private static readonly pb::MessageParser<FpsUdpPacketHead> _parser = new pb::MessageParser<FpsUdpPacketHead>(() => new FpsUdpPacketHead());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FpsUdpPacketHead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.ProtolJava.FpsNetProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FpsUdpPacketHead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FpsUdpPacketHead(FpsUdpPacketHead other) : this() {
      roomId_ = other.roomId_;
      playerId_ = other.playerId_;
      ensurePacket_ = other.ensurePacket_;
      masterPacketNum_ = other.masterPacketNum_;
      slavePacketNum_ = other.slavePacketNum_;
      totalSlavePacketNum_ = other.totalSlavePacketNum_;
      rtt_ = other.rtt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FpsUdpPacketHead Clone() {
      return new FpsUdpPacketHead(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    ///房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    ///玩家ID	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ensurePacket" field.</summary>
    public const int EnsurePacketFieldNumber = 3;
    private bool ensurePacket_;
    /// <summary>
    ///是否是确认包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnsurePacket {
      get { return ensurePacket_; }
      set {
        ensurePacket_ = value;
      }
    }

    /// <summary>Field number for the "masterPacketNum" field.</summary>
    public const int MasterPacketNumFieldNumber = 4;
    private int masterPacketNum_;
    /// <summary>
    ///主包号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MasterPacketNum {
      get { return masterPacketNum_; }
      set {
        masterPacketNum_ = value;
      }
    }

    /// <summary>Field number for the "slavePacketNum" field.</summary>
    public const int SlavePacketNumFieldNumber = 5;
    private int slavePacketNum_;
    /// <summary>
    ///辅包号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlavePacketNum {
      get { return slavePacketNum_; }
      set {
        slavePacketNum_ = value;
      }
    }

    /// <summary>Field number for the "totalSlavePacketNum" field.</summary>
    public const int TotalSlavePacketNumFieldNumber = 6;
    private int totalSlavePacketNum_;
    /// <summary>
    ///总的辅包号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalSlavePacketNum {
      get { return totalSlavePacketNum_; }
      set {
        totalSlavePacketNum_ = value;
      }
    }

    /// <summary>Field number for the "rtt" field.</summary>
    public const int RttFieldNumber = 7;
    private int rtt_;
    /// <summary>
    ///往返时延
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rtt {
      get { return rtt_; }
      set {
        rtt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FpsUdpPacketHead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FpsUdpPacketHead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (EnsurePacket != other.EnsurePacket) return false;
      if (MasterPacketNum != other.MasterPacketNum) return false;
      if (SlavePacketNum != other.SlavePacketNum) return false;
      if (TotalSlavePacketNum != other.TotalSlavePacketNum) return false;
      if (Rtt != other.Rtt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (EnsurePacket != false) hash ^= EnsurePacket.GetHashCode();
      if (MasterPacketNum != 0) hash ^= MasterPacketNum.GetHashCode();
      if (SlavePacketNum != 0) hash ^= SlavePacketNum.GetHashCode();
      if (TotalSlavePacketNum != 0) hash ^= TotalSlavePacketNum.GetHashCode();
      if (Rtt != 0) hash ^= Rtt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (EnsurePacket != false) {
        output.WriteRawTag(24);
        output.WriteBool(EnsurePacket);
      }
      if (MasterPacketNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MasterPacketNum);
      }
      if (SlavePacketNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SlavePacketNum);
      }
      if (TotalSlavePacketNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalSlavePacketNum);
      }
      if (Rtt != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Rtt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (EnsurePacket != false) {
        size += 1 + 1;
      }
      if (MasterPacketNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MasterPacketNum);
      }
      if (SlavePacketNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlavePacketNum);
      }
      if (TotalSlavePacketNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalSlavePacketNum);
      }
      if (Rtt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rtt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FpsUdpPacketHead other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.EnsurePacket != false) {
        EnsurePacket = other.EnsurePacket;
      }
      if (other.MasterPacketNum != 0) {
        MasterPacketNum = other.MasterPacketNum;
      }
      if (other.SlavePacketNum != 0) {
        SlavePacketNum = other.SlavePacketNum;
      }
      if (other.TotalSlavePacketNum != 0) {
        TotalSlavePacketNum = other.TotalSlavePacketNum;
      }
      if (other.Rtt != 0) {
        Rtt = other.Rtt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            EnsurePacket = input.ReadBool();
            break;
          }
          case 32: {
            MasterPacketNum = input.ReadInt32();
            break;
          }
          case 40: {
            SlavePacketNum = input.ReadInt32();
            break;
          }
          case 48: {
            TotalSlavePacketNum = input.ReadInt32();
            break;
          }
          case 56: {
            Rtt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TCP通信的包头 
  /// </summary>
  public sealed partial class TcpPacketHead : pb::IMessage<TcpPacketHead> {
    private static readonly pb::MessageParser<TcpPacketHead> _parser = new pb::MessageParser<TcpPacketHead>(() => new TcpPacketHead());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TcpPacketHead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Net.ProtolJava.FpsNetProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpPacketHead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpPacketHead(TcpPacketHead other) : this() {
      packetSize_ = other.packetSize_;
      rpcName_ = other.rpcName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpPacketHead Clone() {
      return new TcpPacketHead(this);
    }

    /// <summary>Field number for the "packetSize" field.</summary>
    public const int PacketSizeFieldNumber = 1;
    private int packetSize_;
    /// <summary>
    ///包体大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PacketSize {
      get { return packetSize_; }
      set {
        packetSize_ = value;
      }
    }

    /// <summary>Field number for the "rpcName" field.</summary>
    public const int RpcNameFieldNumber = 2;
    private string rpcName_ = "";
    /// <summary>
    ///协议名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RpcName {
      get { return rpcName_; }
      set {
        rpcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TcpPacketHead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TcpPacketHead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PacketSize != other.PacketSize) return false;
      if (RpcName != other.RpcName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PacketSize != 0) hash ^= PacketSize.GetHashCode();
      if (RpcName.Length != 0) hash ^= RpcName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PacketSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PacketSize);
      }
      if (RpcName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RpcName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PacketSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PacketSize);
      }
      if (RpcName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RpcName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TcpPacketHead other) {
      if (other == null) {
        return;
      }
      if (other.PacketSize != 0) {
        PacketSize = other.PacketSize;
      }
      if (other.RpcName.Length != 0) {
        RpcName = other.RpcName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PacketSize = input.ReadInt32();
            break;
          }
          case 18: {
            RpcName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
